# -*- coding: utf-8 -*-
"""Untitled71.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gw9Xw4hPQgNa8Ez4Am00kfCo7H7GP83Q
"""

import pandas as pd
import itertools
import matplotlib.pyplot as plt
import math
import numpy as np
import seaborn as sns
import warnings
import json
from IPython.display import display

data_trans = "/content/Transactions - Transactions.csv"
df_trans = pd.read_csv(data_trans)
df_trans.head()

data_categ = "/content/Categories - Categories.csv"
df_categ = pd.read_csv(data_categ)
df_categ.head()

df_categ.columns

df_trans.columns

df = pd.merge(df_trans, df_categ, on='MerchantName')

# Calculate the recency, frequency, and monetary values for each customer
df['Recency'] = df.groupby('CustomerID')['TransactionFrom(days)'].transform('max') - df['TransactionFrom(days)']
df['Frequency'] = df.groupby('CustomerID')['TransactionRank'].transform('count')
df['Monetary'] = df.groupby('CustomerID')['TransactionValue'].transform('sum')
df['Recency'] = df['Recency']

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
rfm_features = scaler.fit_transform(df[['Recency', 'Frequency', 'Monetary']])

df.isna().sum()

df.duplicated().sum()

df.info()

df['Category'].unique()

category_mapping = {
    'f&b': 'food_and_beverage',
    'f_b': 'food_and_beverage',
    'groceri': 'grocery',
    'grocery': 'grocery',
    'health & beauty': 'health_and_beauty',
    'fashion': 'fashion',
    'electronics': 'electronics',
    'transportaion': 'transportation',
    'entertainment': 'entertainment',
    'car services': 'car_services',
    'jewerlies': 'jewelry',
    'optics': 'optics'
}


df['Category'] = df['Category'].str.lower()
df['Category'] = df['Category'].replace(category_mapping)

df['Category'].unique()

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.hist(df['Recency'], bins=50)
plt.title('Recency Distribution')

plt.subplot(1, 3, 2)
plt.hist(df['Frequency'], bins=50)
plt.title('Frequency Distribution')

plt.subplot(1, 3, 3)
plt.hist(df['Monetary'], bins=50)
plt.title('Monetary Distribution')

plt.tight_layout()
plt.show()





!pip install scikit-learn-extra







import pandas as pd
from sklearn.preprocessing import StandardScaler


df['Recency'] = df.groupby('CustomerID')['TransactionFrom(days)'].transform('max') - df['TransactionFrom(days)']
df['Frequency'] = df.groupby('CustomerID')['TransactionRank'].transform('count')
df['Monetary'] = df.groupby('CustomerID')['TransactionValue'].transform('sum')

scaler = StandardScaler()
rfm_features = scaler.fit_transform(df[['Recency', 'Frequency', 'Monetary']])


rfm_df = df[['CustomerID', 'Recency', 'Frequency', 'Monetary']].drop_duplicates(subset=['CustomerID'])


rfm_df[['Recency', 'Frequency', 'Monetary']] = scaler.fit_transform(rfm_df[['Recency', 'Frequency', 'Monetary']])



!pip install streamlit

import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn_extra.cluster import KMedoids
from sklearn.metrics import silhouette_score

def cluster_and_evaluate(rfm_features, algorithm):
    if algorithm == "K-Means":
        model = KMeans(n_clusters=5, n_init=10)
    elif algorithm == "Hierarchical Clustering":
        model = AgglomerativeClustering(n_clusters=5)
    elif algorithm == "DBSCAN":
        model = DBSCAN(eps=0.5, min_samples=10)
    elif algorithm == "K-Medoids":
        model = KMedoids(n_clusters=5)

    labels = model.fit_predict(rfm_features)
    score = silhouette_score(rfm_features, labels)
    return labels, score

st.title("Customer Segmentation with RFM Analysis")

labels, score = cluster_and_evaluate(rfm_df[['Recency', 'Frequency', 'Monetary']], "K-Means")


rfm_df['Cluster'] = labels

st.write("RFM Data:")
st.dataframe(rfm_df)

st.write("Cluster Labels:")
st.write(rfm_df[['CustomerID', 'Cluster']])





